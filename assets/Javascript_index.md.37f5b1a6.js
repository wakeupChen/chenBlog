import{o as n,c as a,a as s}from"./app.351fb247.js";const p='{"title":"JS都有哪些数据类型？","description":"","frontmatter":{},"headers":[{"level":2,"title":"JS都有哪些数据类型？","slug":"js都有哪些数据类型？"},{"level":2,"title":"null 和 undefined 的区别？","slug":"null-和-undefined-的区别？"},{"level":2,"title":"基本数据类型和引用数据类型在存储上有什么不同？什么是深浅拷贝？如何实现？","slug":"基本数据类型和引用数据类型在存储上有什么不同？什么是深浅拷贝？如何实现？"},{"level":2,"title":"JS 有哪些判断数组的方式？","slug":"js-有哪些判断数组的方式？"},{"level":2,"title":"如何实现数组去重？遇到深度对象如何处理？","slug":"如何实现数组去重？遇到深度对象如何处理？"},{"level":2,"title":"有一个数组 arr = [1,3,29,8,102,22,15] ，问 arr.sort() 的结果？如何从大到小排序？","slug":"有一个数组-arr-1-3-29-8-102-22-15-，问-arr-sort-的结果？如何从大到小排序？"},{"level":2,"title":"编写一个查找数组中最长公共前缀的函数？","slug":"编写一个查找数组中最长公共前缀的函数？"},{"level":2,"title":"如何快速将数组转为对象？","slug":"如何快速将数组转为对象？"}],"relativePath":"Javascript/index.md","lastUpdated":1674974730115}',t={},o=s('<h2 id="js都有哪些数据类型？"><a class="header-anchor" href="#js都有哪些数据类型？" aria-hidden="true">#</a> JS都有哪些数据类型？</h2><p>首先，JS 分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p>基本数据类型： number , string , boolean , undefined , null ,symbol</p><p>引用数据类型： Object , Array , Function</p><h2 id="null-和-undefined-的区别？"><a class="header-anchor" href="#null-和-undefined-的区别？" aria-hidden="true">#</a> null 和 undefined 的区别？</h2><ol><li><h4 id="意义不同"><a class="header-anchor" href="#意义不同" aria-hidden="true">#</a> 意义不同</h4><p>null 表示没有对象，即该处不应该有值</p><p>undefined 表示缺少值，即此处应该有值，但未定义</p></li><li><h4 id="类型转化不同"><a class="header-anchor" href="#类型转化不同" aria-hidden="true">#</a> 类型转化不同</h4><p>null 默认转成 0</p><p>undefined 默认转为 NaN</p></li></ol><h2 id="基本数据类型和引用数据类型在存储上有什么不同？什么是深浅拷贝？如何实现？"><a class="header-anchor" href="#基本数据类型和引用数据类型在存储上有什么不同？什么是深浅拷贝？如何实现？" aria-hidden="true">#</a> 基本数据类型和引用数据类型在存储上有什么不同？什么是深浅拷贝？如何实现？</h2><p><a href="https://juejin.cn/post/6875859084600410119" target="_blank" rel="noopener noreferrer">一文搞懂JS系列（二）之JS内存生命周期，栈内存与堆内存，深浅拷贝</a></p><h2 id="js-有哪些判断数组的方式？"><a class="header-anchor" href="#js-有哪些判断数组的方式？" aria-hidden="true">#</a> JS 有哪些判断数组的方式？</h2><ol><li><h4 id="array-isarray"><a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a> Array.isArray()</h4></li></ol><div class="language-javascript"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\nArray<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>\n</code></pre></div><ol start="2"><li><h4 id="instanceof"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h4></li></ol><div class="language-javascript"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n</code></pre></div><ol start="3"><li><h4 id="constructor"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h4></li></ol><div class="language-javascript"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span><span class="token comment">//true</span>\n</code></pre></div><ol start="4"><li><h4 id="object-prototype-tostring-call"><a class="header-anchor" href="#object-prototype-tostring-call" aria-hidden="true">#</a> Object.prototype.toString.call()</h4></li></ol><div class="language-javascript"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span><span class="token comment">//true</span>\n</code></pre></div><p>它强大的地方在于不仅仅可以检验是否为数组，比如是否是一个函数，是否是数字等等。</p><div class="language-javascript"><pre><code><span class="token comment">//检验是否是函数</span>\n<span class="token keyword">let</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Function]&#39;</span><span class="token punctuation">;</span><span class="token comment">//true</span>\n<span class="token comment">//检验是否是数字</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Number]&#39;</span><span class="token punctuation">;</span><span class="token comment">//true</span>\n</code></pre></div><h2 id="如何实现数组去重？遇到深度对象如何处理？"><a class="header-anchor" href="#如何实现数组去重？遇到深度对象如何处理？" aria-hidden="true">#</a> 如何实现数组去重？遇到深度对象如何处理？</h2><div class="language-javascript"><pre><code><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    arr2<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token operator">=&gt;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">?</span><span class="token string">&#39;&#39;</span><span class="token operator">:</span>arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="有一个数组-arr-1-3-29-8-102-22-15-，问-arr-sort-的结果？如何从大到小排序？"><a class="header-anchor" href="#有一个数组-arr-1-3-29-8-102-22-15-，问-arr-sort-的结果？如何从大到小排序？" aria-hidden="true">#</a> 有一个数组 arr = [1,3,29,8,102,22,15] ，问 arr.sort() 的结果？如何从大到小排序？</h2><p><code>[1, 102, 15, 22, 29, 3, 8]</code></p><div class="language-javascript"><pre><code>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>\n</code></pre></div><h2 id="编写一个查找数组中最长公共前缀的函数？"><a class="header-anchor" href="#编写一个查找数组中最长公共前缀的函数？" aria-hidden="true">#</a> 编写一个查找数组中最长公共前缀的函数？</h2><p>例如 str=[&#39;flower&#39;,&#39;flow&#39;,&#39;flight&#39;] =&gt; &#39;fl&#39;</p><p>例如 str=[&#39;tiger&#39;,&#39;dog&#39;,&#39;cat&#39;] =&gt; &#39;&#39;</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;flower&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;flow&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;flight&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> res<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token operator">=&gt;</span>x<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">===</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        res<span class="token operator">+=</span>temp<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// fl</span>\n</code></pre></div><h2 id="如何快速将数组转为对象？"><a class="header-anchor" href="#如何快速将数组转为对象？" aria-hidden="true">#</a> 如何快速将数组转为对象？</h2><div class="language-javascript"><pre><code><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;flower&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;flow&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;flight&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>arr<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {0: &#39;flower&#39;, 1: &#39;flow&#39;, 2: &#39;flight&#39;}</span>\n</code></pre></div>',31);t.render=function(s,p,t,e,c,l){return n(),a("div",null,[o])};export default t;export{p as __pageData};
